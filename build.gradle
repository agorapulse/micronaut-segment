/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2021 Agorapulse.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.kordamp.gradle.groovy-project'
    id 'org.kordamp.gradle.checkstyle'
    id 'org.kordamp.gradle.codenarc'
    id 'org.kordamp.gradle.coveralls'
    id 'io.github.gradle-nexus.publish-plugin'
}

if (!project.hasProperty('ossrhUsername'))      ext.ossrhUsername       = System.getenv('SONATYPE_USERNAME') ?: '**UNDEFINED**'
if (!project.hasProperty('ossrhPassword'))      ext.ossrhPassword       = System.getenv('SONATYPE_PASSWORD') ?: '**UNDEFINED**'
if (!project.hasProperty('signingKeyId'))       ext.signingKeyId        = System.getenv('SIGNING_KEY_ID') ?: '**UNDEFINED**'
if (!project.hasProperty('signingPassword'))    ext.signingPassword     = System.getenv('SIGNING_PASSWORD') ?: '**UNDEFINED**'
if (!project.hasProperty('signingSecretKey'))   ext.signingSecretKey    = System.getenv('SIGNING_SECRET_KEY_PATH') ? rootProject.file(System.getenv('SIGNING_SECRET_KEY_PATH')).text : '**UNDEFINED**'

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name        = 'Micronaut Segment'
        vendor      = 'Agorapulse'
        description = 'Micronaut integration for Segment'

        links {
            website      = "https://github.com/" + slug
            issueTracker = "https://github.com/" + slug + "/issues"
            scm          = "https://github.com/" + slug + ".git"
        }

        people {
            person {
                id    = 'musketyr'
                name  = 'Vladimir Orany'
                roles = ['developer']
            }
        }

        repositories {
            repository {
                name = 'localRelease'
                url  = "" + project.rootProject.buildDir + "/repos/local/release"
            }
            repository {
                name = 'localSnapshot'
                url  = "" + project.rootProject.buildDir + "/repos/local/snapshot"
            }
        }
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    publishing {
        signing {
            enabled =  true
            keyId = signingKeyId
            secretKey = signingSecretKey
            password = signingPassword
        }
        releasesRepository  = 'localRelease'
        snapshotsRepository = 'localSnapshot'
    }

    quality {
        checkstyle {
            toolVersion = '8.27'
        }

        codenarc {
            toolVersion = '1.5'
        }
    }

    coverage {
        coveralls {
            enabled = true
        }
    }

    docs {
        groovydoc {
            aggregate {
                enabled = false
            }
        }
        sourceHtml {
            enabled = false
        }
    }

}

nexusPublishing {
    repositories {
        sonatype {
            username = ossrhUsername
            password = ossrhPassword
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    license {
        exclude '**/*.json'
        exclude '***.yml'
    }
}
gradleProjects {
    subprojects {
        dirs(['examples', 'libs']) {
            dependencies {
                annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
                annotationProcessor "io.micronaut:micronaut-inject-java"
                annotationProcessor "io.micronaut:micronaut-validation"

                api platform("io.micronaut:micronaut-bom:$micronautVersion")
                api "io.micronaut:micronaut-validation"

                compileOnly "io.micronaut:micronaut-inject-groovy"

                testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
                testAnnotationProcessor "io.micronaut:micronaut-inject-java"

                testImplementation("org.spockframework:spock-core:$spockVersion") {
                    exclude group: "org.codehaus.groovy", module: "groovy-all"
                }

                testImplementation "io.micronaut.test:micronaut-test-spock"
                testImplementation "io.micronaut:micronaut-inject-groovy"
                testImplementation 'net.bytebuddy:byte-buddy:1.10.1'
                testImplementation 'org.objenesis:objenesis:3.0.1'

                testImplementation "org.junit.jupiter:junit-jupiter-api"
                testImplementation "io.micronaut.test:micronaut-test-junit5"
                testImplementation 'org.mockito:mockito-core:3.11.2'
                testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
            }

            test {
                useJUnitPlatform()
            }

            // useful for Micronaut
            tasks.withType(GroovyCompile) {
                groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
            }

            // useful for Micronaut
            tasks.withType(JavaCompile){
                options.encoding = "UTF-8"
                options.compilerArgs.add('-parameters')
            }

            // location independent tests (useful for stable CI builds)
            tasks.withType(Test){
                systemProperty 'user.timezone', 'UTC'
                systemProperty 'user.language', 'en'
            }

            // useful for IntelliJ
            task cleanOut(type: Delete) {
                delete file('out')
            }

            clean.dependsOn cleanOut
        }
    }
}
subprojects { subproject ->
    if (subproject.name == 'guide') return


}

check.dependsOn('aggregateCheckstyle', 'aggregateCodenarc', 'aggregateAllTestReports', 'coveralls')
